import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable org.nemomobile.messages.internal 1.0'

Module {
    dependencies: []
    Component {
        name: "AccountsModel"
        prototype: "QAbstractListModel"
        exports: [
            "org.nemomobile.messages.internal/TelepathyAccountsModel 1.0"
        ]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "AccountPtrRole": 256,
                "AccountUidRole": 257
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "ready"; type: "bool"; isReadonly: true }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "uid"; type: "string" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "uid"; type: "string" }
        }
        Method {
            name: "indexOfAccount"
            type: "int"
            Parameter { name: "localUid"; type: "string" }
        }
        Method {
            name: "getAccount"
            type: "DeclarativeAccount*"
            Parameter { name: "localUid"; type: "string" }
        }
    }
    Component {
        name: "ChannelManager"
        prototype: "QObject"
        exports: [
            "org.nemomobile.messages.internal/TelepathyChannelManager 1.0"
        ]
        exportMetaObjectRevisions: [0]
        Property { name: "handlerName"; type: "string" }
        Method {
            name: "getConversation"
            type: "ConversationChannel*"
            Parameter { name: "localUid"; type: "string" }
            Parameter { name: "remoteUid"; type: "string" }
        }
        Method {
            name: "isPendingEvent"
            type: "bool"
            Parameter { name: "eventId"; type: "int" }
        }
    }
    Component {
        name: "ConversationChannel"
        prototype: "QObject"
        exports: ["org.nemomobile.messages.internal/ConversationChannel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "State"
            values: {
                "Null": 0,
                "PendingRequest": 1,
                "Requested": 2,
                "PendingReady": 3,
                "Ready": 4,
                "Error": 5
            }
        }
        Property { name: "state"; type: "State"; isReadonly: true }
        Property { name: "localUid"; type: "string"; isReadonly: true }
        Property { name: "remoteUid"; type: "string"; isReadonly: true }
        Property { name: "sequence"; type: "int"; isReadonly: true }
        Signal {
            name: "stateChanged"
            Parameter { name: "newState"; type: "int" }
        }
        Signal { name: "requestSucceeded" }
        Signal {
            name: "requestFailed"
            Parameter { name: "errorName"; type: "string" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "sendingFailed"
            Parameter { name: "eventId"; type: "int" }
            Parameter { name: "sender"; type: "ConversationChannel"; isPointer: true }
        }
        Signal {
            name: "sendingSucceeded"
            Parameter { name: "eventId"; type: "int" }
            Parameter { name: "sender"; type: "ConversationChannel"; isPointer: true }
        }
        Method {
            name: "sendMessage"
            Parameter { name: "text"; type: "string" }
            Parameter { name: "eventId"; type: "int" }
        }
        Method {
            name: "sendMessage"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "ensureChannel" }
        Method {
            name: "eventIsPending"
            type: "bool"
            Parameter { name: "eventId"; type: "int" }
        }
    }
    Component {
        name: "DeclarativeAccount"
        prototype: "QObject"
        exports: ["org.nemomobile.messages.internal/TelepathyAccount 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ConnectionStatus"
            values: {
                "Connected": 0,
                "Connecting": 1,
                "Disconnected": 2
            }
        }
        Enum {
            name: "ConnectionStatusReason"
            values: {
                "ReasonNoneSpecified": 0,
                "ReasonRequested": 1,
                "ReasonNetworkError": 2,
                "ReasonAuthenticationFailed": 3,
                "ReasonEncryptionError": 4
            }
        }
        Property { name: "localUid"; type: "string"; isReadonly: true }
        Property { name: "displayName"; type: "string"; isReadonly: true }
        Property { name: "online"; type: "bool"; isReadonly: true }
        Property { name: "connectionStatus"; type: "ConnectionStatus"; isReadonly: true }
        Property { name: "connectionStatusReason"; type: "ConnectionStatusReason"; isReadonly: true }
        Property { name: "connectionError"; type: "string"; isReadonly: true }
    }
    Component {
        name: "MmsMessageProgress"
        prototype: "QObject"
        exports: ["org.nemomobile.messages.internal/MmsMessageProgress 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "path"; type: "string" }
        Property { name: "inbound"; type: "bool" }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Property { name: "running"; type: "bool"; isReadonly: true }
        Property { name: "progress"; type: "float"; isReadonly: true }
    }
    Component {
        name: "QAbstractItemModel"
        prototype: "QObject"
        Enum {
            name: "LayoutChangeHint"
            values: {
                "NoLayoutChangeHint": 0,
                "VerticalSortHint": 1,
                "HorizontalSortHint": 2
            }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
        Signal {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutChanged" }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutAboutToBeChanged" }
        Signal {
            name: "rowsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "modelAboutToBeReset" }
        Signal { name: "modelReset" }
        Signal {
            name: "rowsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "rowsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Signal {
            name: "columnsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "column"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "parent"
            type: "QModelIndex"
            Parameter { name: "child"; type: "QModelIndex" }
        }
        Method {
            name: "sibling"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "idx"; type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "columnCount"; type: "int" }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "hasChildren"; type: "bool" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Method {
            name: "fetchMore"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "canFetchMore"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "flags"
            type: "Qt::ItemFlags"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component { name: "QAbstractListModel"; prototype: "QAbstractItemModel" }
    Component {
        name: "SmsCharacterCounter"
        prototype: "QObject"
        exports: ["org.nemomobile.messages.internal/SmsCharacterCounter 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "text"; type: "string" }
        Property { name: "messageCount"; type: "int"; isReadonly: true }
        Property { name: "remainingCharacterCount"; type: "int"; isReadonly: true }
    }
    Component {
        name: "SmsSender"
        prototype: "QObject"
        exports: ["org.nemomobile.messages.internal/SmsSender 1.0"]
        exportMetaObjectRevisions: [0]
        Signal {
            name: "sendingSucceeded"
            Parameter { name: "eventId"; type: "int" }
        }
        Signal {
            name: "sendingFailed"
            Parameter { name: "eventId"; type: "int" }
        }
        Method {
            name: "sendSMS"
            type: "int"
            Parameter { name: "modem"; type: "string" }
            Parameter { name: "phoneNumber"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
    }
}
